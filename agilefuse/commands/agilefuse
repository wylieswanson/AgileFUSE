#!/usr/bin/env python

from agilefuse import AgileFUSE
from fuse import FUSE, Operations
import os,sys,errno
from optparse import OptionParser, OptionGroup

__version__ = "0.0.5"
__author__ = "Wylie Swanson (wylie@pingzero.net)"

def	main():

	if sys.platform == "darwin": DEFAULT_MOUNT = "/Volumes/Agile Storage"
	else: DEFAULT_MOUNT = "/mnt/agile"

	parser = OptionParser( usage= "usage: %prog [options]", version="%prog "+str(__version__))

	parser.add_option("-d", "--debug", action="store_true", dest="debug", help="run in debug mode", default=False)
	parser.add_option("-v", "--verbose", action="count", dest="verbosity", help="verbose operation,  more -v's increase verbosity")
	parser.add_option("-m", "--mount", dest="mount", help="mount path, default: '"+DEFAULT_MOUNT+"'", default=DEFAULT_MOUNT)
	parser.add_option("-r", "--readlib", dest="readlib", help="read library: urllib or curl [default: %default]", default="urllib")

	parser.add_option("--disable-threads", action="store_true", dest="nothreads", help="run in single-threaded mode", default=False)
	parser.add_option("--enable-threads", action="store_true", dest="threads", help="run in threaded mode [default]", default=True)

	group = OptionGroup(parser, "Apple OS X/Darwin options", "Use these options to create the experience you are looking for on Mac.")
	group.add_option("--volname", dest="volname", help="setup a volume name, default: 'Agile Storage'", default="Agile Storage")
	group.add_option("-i", "--icon", dest="volicon", help="setup a volume icon, default: '/etc/agile/agile.icns'", default="/etc/agile/agile.icns")

	group.add_option("--enable-browse", action="store_true", dest="browse", help="Finder will browse the volume [default]", default=True)
	group.add_option("--disable-browse", action="store_false", dest="browse", help="Finder will NOT browse the volume")

	group.add_option("--enable-local", action="store_true", dest="local", help="treat as a local filesystem [default]", default=True)
	group.add_option("--disable-local", action="store_false", dest="local", help="do NOT treat as a local filesystem")

	group.add_option("--enable-autocache", action="store_true", dest="autocache", help="detect modification time changes with getattr")
	group.add_option("--disable-autocache", action="store_false", dest="autocache", help="detect modification time changes with getattr [default]", default=False)
	
	group.add_option("--enable-xattr", action="store_true", dest="xattr", help="xattr [default]", default=True)
	group.add_option("--disable-xattr", action="store_false", dest="xattr", help="xattr is disabled")

	group.add_option("--enable-double", action="store_true", dest="double", help="double [default]", default=True)
	group.add_option("--disable-double", action="store_false", dest="double", help="no double")

	group.add_option("--defer_permissions", action="store_true", dest="defer_permissions", help="defer permissions to the remote", default=True)
	group.add_option("--negative_vncache", action="store_true", dest="negative_vncache", help="negative_vncache", default=True)
	group.add_option("--nolocalcaches", action="store_true", dest="nolocalcaches", help="disables unified buffer cache, vnode name caching, attr caching, and readaheads", default=False)
	group.add_option("--iosize", dest="iosize", help="iosize, where N is the I/O size in bytes", default="1048576")
	group.add_option("--readonly", action="store_true", dest="readonly", help="mount in read-only mode", default=False)
	parser.add_option_group(group)

	(options, args) = parser.parse_args()

	if len(args)<>0: parser.error("Wrong number of arguments -- use '%s -h' for help" % (sys.argv[0]))
	if options.threads and options.nothreads: parser.error("You can't use --enable-threads and --disable-threads -- use '%s -h' for help" % (sys.argv[0]))

	if options.readlib not in ['urllib','curl']:
		print "%s: invalid read library, use 'urllib' or 'curl'." % options.readlib
		sys.exit(1)
	if not os.path.isdir(options.mount):
		if options.verbosity: 
			print "%s: No such directory, creating it..." % options.mount
		try:
			os.mkdir(options.mount)
		except os.error, e:
			if e.errno != errno.EEXIST:
				print e
				sys.exit(1)

	# print str(options)
	# sys.exit(1)

	kwargs = dict()
	if options.debug: kwargs['foreground'] = True

	if options.verbosity:
		print "Mounting: %s." % options.mount
		if options.verbosity>1: 
			print str(options)
	if sys.platform == "darwin":
		unmountStr = "When done, eject it from the Finder or run 'unmount %s'." % "AgileFUSE"
		kwargs['volname'] = options.volname
		if options.local: kwargs['local'] = True
		if options.double is False: kwargs['noappledouble'] = True
		if options.xattr is False: kwargs['noapplexattr'] = True
		if options.browse is False: kwargs['nobrowse'] = True
		if options.negative_vncache: kwargs['negative_vncache'] = options.negative_vncache
		if options.readonly: kwargs['rdonly'] = options.readonly
		if options.iosize: kwargs['iosize'] = options.iosize
		if options.defer_permissions: kwargs['defer_permissions'] = options.defer_permissions
		if options.volicon:
			if os.path.isfile(options.volicon):
				kwargs['modules'] = 'volicon'
				kwargs['iconpath'] = options.volicon
			else:
				print "file not found: %s, volume icon is unavailable." % (options.volicon)
	else:
		unmountStr = "Unmount it with `fusermount -u %s' (without quotes)." % options.mount

	if options.autocache: kwargs['auto_cache'] = options.autocache
	if options.nothreads: kwargs['nothreads'] = True

	if options.verbosity:
		print unmountStr

	result = AgileFUSE(options.verbosity).updatecachepath('/')
	fuse = FUSE(AgileFUSE(options.readlib, options.verbosity), options.mount, **kwargs )

if __name__ == "__main__":
	main()
